1. Prerequisites


  oo2c 1.5.6.2 (patch against 1.5.6 can be found at
    http://pweb.de/vanacken.do/ooc/oo2c-patches/oo2c_32-1.5.6-1.5.6.2.diff.gz)
  libadt (from the CVS repository)
  libxml (from the CVS repository)
  gaf2 (from the CVS repository)
  GNU make

2. Setting up the Development Environment

Make sure that libxml/src/, libadt/src/, and gaf2/src/ is in the
search path for *.Mod and *.c (for example, by editing and including
.oo2crc_local).  For the language specific tests, the Hostess test
files are expected to reside at
`../hostess/hostess/oberon/testcases.xml', as seen from the ooc2
top-level directory.

Then, do

  ./configure
  . ENV
  make test

If this produces an error other than the one described below, mail me.
(Note: The ". ENV" assumes a Bourne compabtible shell.  This command
sets the environment variables OOC_DEV_ROOT and MAIN_MAKEFILE.  If you
are running a different shell, you need to do something equivalent.)

There is one known problem that may cause "make test" to fail after
the sources have been checked out.  If the tests in tests/compile/
produce an "100 Value out of range" for the test case `baseline8', do

  touch src/Integer.Mod

and repeat "make test".  This way, the `Integers' module from the CVS
repository is used instead of the broken one distributed with oo2c,
which should fix the problem.

--------

An overview over the modules is in src/AllModules.Mod.  Another point
of entry are the test programs.  Currently, the most "evolved" test
programs are src/TestSymTab.Mod (tests/symtab/) and
src/TestInterfaceGen.Mod (tests/interface/).

The general idea of the module structure is: split functionality in
clearly separated subtrees, and have automated tests for all of them.
Here is a list of subsystems:

  configuration (Config:*, OOC:Config:*)
  repository handling (OOC:Repository:*)
  scanner (OOC:Scanner:*)
  abstract syntax tree (OOC:AST:*)
  symbol table (OOC:SymbolTable:*)
  documentation (OOC:Doc:*)
  build engine (OOC:Make:*)
  intermediate code representation (OOC:IR:*)
  SSA back-end (OOC:SSA:*)

Tests are located in the tests/ subdirectory.  The whole set of tests
is run by doing "make test" in the top-level directory.  Within each
directory under tests/ with a Makefile, "make test" can be called to
selectively run only the tests from this directory.

For "make doc" to work, the tool xsltproc (from the GNOME XML suite,
libxslt, AFAIK) must be installed.

"make clean" returns the file tree to a pristine state, removing all
the files that were produced during compilation and testing.

"make distclean" is more thorough than "make clean", getting rid of
intermediate files that should not be checked into the CVS.


-- Michael van Acken <mia@de.uu.net>
