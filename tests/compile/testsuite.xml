<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE testsuite-ext
          SYSTEM "../../rsrc/OOC/TestFramework/testcases-ext.dtd" >

<testsuite-ext
  profile="Test Suite for Framework Testing"
  select ="&SetupTestCasesWithOut;
  function1 function2
  constfold1 constfold2 constfold3 constfold4 constfold5
  constfold6 constfold7 constfold8 constfold9 constfold10 constfold11
  constfold12 constfold13 constfold14 constfold15 constfold16
  constfold17">

<!--<testsuite-ext
  profile="Test Suite for Framework Testing"
  select ="&SetupTestCasesWithOut;
  constfold10 constfold11">-->
  
  &TestSetupWithOut;
    
  <testcases profile="OOC2 Development" default-lang="O1 O2 AO">
    <test id="function1" type="run"
      file="HOTFunction1.Mod" output="HOTFunction1.Ref">
      A very simple function: No input arguments, and a return
      statement with a constant expression.
    </test>
    
    <test id="function2" type="run"
      file="HOTFunction2.Mod" output="HOTFunction2.Ref">
      Another very simple function: The input parameter is used as the
      function's return value, without any transformation.
    </test>

    <test id="constfold1" type="run"
      file="ConstFold1.Mod" output="ConstFold1.Ref">
      Simple function involving a constant but no operators.
    </test>

    <test id="constfold2" type="run"
      file="ConstFold2.Mod" output="ConstFold2.Ref">
      A function involving a constant with an operator.
    </test>

    <test id="constfold3" type="reject" file="ConstFold3.Mod">
      Incompatible types for operator.
    </test>

    <test id="constfold4" type="reject" file="ConstFold4.Mod">
      CONST expression is not constant.
    </test>

    <test id="constfold5" type="run" 
      file="ConstFold5.Mod" output="ConstFold5.Ref">
      ConstFold5 and 6 check that the evaluation of a constant expression
      assigns the correct type based on the value of the result. In both
      cases, the most meaningful output is the IR which indicates assigned
      types. In this example arithmetic operators return MIN/MAX SHORTINT,
      INTEGER, LONGINT.  
    </test>

    <test id="constfold6" type="reject" file="ConstFold6.Mod">
      In this example arithmetic operators return values just outside MIN/MAX
      SHORTINT,INTEGER,LONGINT. The result type should be larger than the
      operand types. In the case of LONGINT, the result is a "value out of
      range error"
    </test>

    <test id="constfold7" type="run" 
      file="ConstFold7.Mod" output="ConstFold7.Ref">
      Define an array type of fixed length, and write out the length
      using the <code>LEN</code> function.
    </test>
    
    <test id="constfold8" type="run" 
      file="ConstFold8.Mod" output="ConstFold8.Ref">
      Define an array type of fixed length and declare a constant
      using its <code>LEN</code>.
    </test>
    
    <test id="constfold9" type="run" 
      file="ConstFold9.Mod" output="ConstFold9.Ref">
      Similar to <code>constfold7</code>, but the array type's length
      is taken from a declared constant.
    </test>
    
    <test id="constfold10" type="run" 
      file="ConstFold10.Mod" output="ConstFold10.Ref">
      Calls <code>SIZE</code> on the predefined type <code>CHAR</code>.
    </test>
    
    <test id="constfold11" type="run" 
      file="ConstFold11.Mod" output="ConstFold11.Ref">
      Calls <code>SIZE</code> on an array type.
    </test>

    <test id="constfold12" type="run" 
      file="ConstFold12.Mod" output="ConstFold12.Ref">
      Tests evaluation of Boolean expressions.
    </test>
  
    <test id="constfold13" type="run" 
      file="ConstFold13.Mod" output="ConstFold13.Ref">
      Tests evaluation of Integer compare expressions.
    </test>
  
    <test id="constfold14" type="run" 
      file="ConstFold14.Mod" output="ConstFold14.Ref">
      Tests evaluation of String compare expressions.
    </test>

    <test id="constfold15" type="run" 
      file="ConstFold15.Mod" output="ConstFold15.Ref">
      Tests evaluation of CHAR compare expressions.
    </test>

    <test id="constfold16" type="run" 
      file="ConstFold16.Mod" output="ConstFold16.Ref">
      Tests evaluation of SET expressions.
    </test>

    <test id="constfold17" type="run"
      file="ConstFold17.Mod" output="ConstFold17.Ref">
      Initial test for REAL.
    </test>
  </testcases>
  
  <processor-info processor-name="TestCompile">
    <reject-info id="constfold3" pos="c=1%+" msg="Incompatible types for operator"/>
    <reject-info id="constfold4" pos="c=%a" msg="Expression is not constant"/>
    <reject-info id="constfold6" pos="minLongInt%-offset" msg="Type of actual parameter is not compatible with formal type"/>
  </processor-info>
</testsuite-ext>
