<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE testsuite-ext
          SYSTEM "../../rsrc/OOC/TestFramework/testcases-ext.dtd" >

<testsuite-ext
  profile="Test Suite for OOC Core Library">

<!--<testsuite-ext
  profile="Test Suite for OOC Core Library"
  select ="prepare_out_module s">-->

  <testcases profile="Test Suite Setup" default-lang="O1 O2 AO">
    <test id="prepare_out_module" type="accept" file="../compile/src/Out.Mod">
      This is not a test case.  Rather, it prepares an Oakwood
      compliant module <code>Out</code> to supersede OOC's differing
      module of the same name.
    </test>
  </testcases>
  
  <testcases profile="OOC Core Library" default-lang="O2">
    <test id="lib_Ascii" type="run" file="LibAscii.Mod">
      Imports the module <code>Ascii</code>.  Lacking functionality of 
      even moderate complexity, compilation is the only test applied
      to the module.
    </test>
    
    <test id="lib_CharClass" type="run" file="LibCharClass.Mod">
      Imports the module <code>CharClass</code>.  Lacking functionality of 
      even moderate complexity, compilation is the only test applied
      to the module.
    </test>
    
    <test id="lib_Strings_Length1" type="run"
      file="LibStringsLength1.Mod" output="LibStringsLength1.Ref">
      Tests the <code>Length</code> function with <code>0X</code>
      terminated character arrays.
    </test>
    
    <test id="lib_Strings_Assign1" type="run"
      file="LibStringsAssign1.Mod" output="LibStringsAssign1.Ref">
      Tests the <code>Assign</code> function with <code>0X</code>
      terminated source character arrays.  Truncation happens if the
      destination array is not large enough.
    </test>

    <test id="lib_Strings_Extract1" type="run"
      file="LibStringsExtract1.Mod" output="LibStringsExtract1.Ref">
      Tests the <code>Extract</code> function with range parameters
      that are within the limits of the input and output string.
    </test>
    
    <test id="lib_Strings_Extract2" type="run"
      file="LibStringsExtract2.Mod" output="LibStringsExtract2.Ref">
      Tests the <code>Extract</code> function with range parameters
      that exceed the length of the source string.
    </test>
    
    <test id="lib_Strings_Extract3" type="run"
      file="LibStringsExtract3.Mod" output="LibStringsExtract3.Ref">
      Tests the <code>Extract</code> function with a result 
      that must be truncated to fit into the destination string.
    </test>
    
    <test id="lib_Strings_Delete1" type="run"
      file="LibStringsDelete1.Mod" output="LibStringsDelete1.Ref">
      Tests the <code>Delete</code> function with range parameters
      that are within the limits of the input string.
    </test>
    
    <test id="lib_Strings_Delete2" type="run"
      file="LibStringsDelete2.Mod" output="LibStringsDelete2.Ref">
      Call delete on string ranges <code>Delete</code> beyond the
      end of the input string, and after the end of the string.
    </test>

    <test id="lib_Strings_Insert1" type="run"
      file="LibStringsInsert1.Mod" output="LibStringsInsert1.Ref">
      Calls the <code>Insert</code> function to insert substrings
      before, after, and into another string.  The results fit into
      the destination array.
    </test>
    
    <test id="lib_Strings_Insert2" type="run"
      file="LibStringsInsert2.Mod" output="LibStringsInsert2.Ref">
      <code>Insert</code> is a noop if <code>startPos</code> is 
      larger than the string's length.
    </test>
    
    <test id="lib_Strings_Insert3" type="run"
      file="LibStringsInsert3.Mod" output="LibStringsInsert3.Ref">
      Output string must be truncated by <code>Insert</code> if the
      result is too long.
    </test>

    <test id="lib_Strings_Replace1" type="run"
      file="LibStringsReplace1.Mod" output="LibStringsReplace1.Ref">
      Calls the <code>Replace</code> function to replace parts
      within a string.  No truncation.
    </test>
    
    <test id="lib_Strings_Replace2" type="run"
      file="LibStringsReplace2.Mod" output="LibStringsReplace2.Ref">
      <code>Replace</code> is a noop if <code>startPos</code> is 
      larger or equal to the string's length.
    </test>
    
    <test id="lib_Strings_Replace3" type="run"
      file="LibStringsReplace3.Mod" output="LibStringsReplace3.Ref">
      <code>Replace</code> never increased the length of th output string.
    </test>
    
    <test id="lib_Strings_Append1" type="run"
      file="LibStringsAppend1.Mod" output="LibStringsAppend1.Ref">
      Some calls to <code>Append</code>.
    </test>

    <test id="lib_Strings_Concat1" type="run"
      file="LibStringsConcat1.Mod" output="LibStringsConcat1.Ref">
      Some calls to <code>Concat</code>.
    </test>
    
    <test id="lib_Strings_Compare1" type="run"
      file="LibStringsCompare1.Mod" output="LibStringsCompare1.Ref">
      Some calls to <code>Compare</code>.
    </test>

    <test id="lib_Strings_Equal1" type="run"
      file="LibStringsEqual1.Mod" output="LibStringsEqual1.Ref">
      Some calls to <code>Equal</code>.
    </test>
    
    <test id="lib_Strings_FindNext1" type="run"
      file="LibStringsFindNext1.Mod" output="LibStringsFindNext1.Ref">
      Some calls to <code>FindNext</code>.
    </test>
    
    <test id="lib_Strings_FindNext2" type="run"
      file="LibStringsFindNext2.Mod" output="LibStringsFindNext2.Ref">
      Some calls to <code>FindNext</code>, with mismatch, pattern
      longer than string, and partial match before full match.
    </test>

    <test id="lib_Strings_FindPrev1" type="run"
      file="LibStringsFindPrev1.Mod" output="LibStringsFindPrev1.Ref">
      Some calls to <code>FindPrev</code>.
    </test>
    
    <test id="lib_Strings_FindPrev2" type="run"
      file="LibStringsFindPrev2.Mod" output="LibStringsFindPrev2.Ref">
      Some calls to <code>FindPrev</code>, with mismatch, pattern
      longer than string, and partial match before full match.
    </test>

    <test id="lib_Strings_FindDiff1" type="run"
      file="LibStringsFindDiff1.Mod" output="LibStringsFindDiff1.Ref">
      Some calls to <code>FindDiff</code>.
    </test>
    
    <test id="lib_Strings_Capitalize1" type="run"
      file="LibStringsCapitalize1.Mod" output="LibStringsCapitalize1.Ref">
      Some calls to <code>Capitalize</code>.
    </test>
  </testcases>
</testsuite-ext>
