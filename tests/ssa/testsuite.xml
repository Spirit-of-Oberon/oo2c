<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE testsuite-ext
          SYSTEM "../../rsrc/OOC/TestFramework/testcases-ext.dtd">

<testsuite-ext profile="Test Suite for Framework Testing">

<!--<testsuite-ext
  profile="Test Suite for Framework Testing"
  select ="&SetupTestCasesWithOut; div1 div2 mod1 mod2">-->
  
  &TestSetupWithOut;
    
  <testcases profile="OOC2 Development" default-lang="O2">
    <test id="function1" type="run"
      file="../compile/HOTFunction1.Mod" output="../compile/HOTFunction1.Ref">
      A very simple function: No input arguments, and a return
      statement with a constant expression.
    </test>
    
    <test id="function2" type="run"
      file="../compile/HOTFunction2.Mod" output="../compile/HOTFunction2.Ref">
      Another very simple function: The input parameter is used as the
      function's return value, without any transformation.
    </test>
    
    <test id="function3" type="run"
      file="HOTFunction3.Mod" output="HOTFunction3.Ref">
      Another very simple function: The input parameter is copied to 
      a local variable, which is subsequently used as the
      function's return value.
    </test>

    <test id="if1" type="run"
      file="HOTIf1.Mod" output="HOTIf1.Ref">
      A simple <code>IF-ELSE-END</code> statement, using a
      boolean parameter as guard.
    </test>
    
    <test id="if2" type="run"
      file="HOTIf2.Mod" output="HOTIf2.Ref">
      A simple <code>IF-END</code> statement, using a boolean parameter
      as guard.
    </test>
    
    <test id="if3" type="run"
      file="HOTIf3.Mod" output="HOTIf3.Ref">
      A simple <code>IF-ELSIF-ELSE-END</code> statement, using 
      boolean parameters as guards.
    </test>
    
    <test id="with1" type="run" file="With1.Mod" output="With1.Ref">
      A simple <code>WITH</code> statement, serving as a sequence
      of type tests.
    </test>
    
    <test id="with2" type="run" file="With2.Mod" output="With2.Ref">
      A simple <code>WITH</code> statement.  Fields of the guarded
      variable are accessed under the guard.  The variable is
      a parameter, but there is no recursive call involved.  That is,
      a compiler passes this test even if it modifies the signature
      of a procedure within a branch of a <code>WITH</code>.
    </test>
    
    <test id="function4" type="run"
      file="HOTFunction4.Mod" output="HOTFunction4.Ref">
      Another simple function: The boolean input parameter selects
      between one of the two <code>RETURN</code> statements in
      the <code>IF</code> statement.
    </test>
    
    <test id="function5" type="run"
      file="HOTFunction5.Mod" output="HOTFunction5.Ref">
      Yet another simple function: Increment input value by one and
      return the result.
    </test>
    
    <test id="designator1" type="run"
      file="HOTDesignator1.Mod" output="HOTDesignator1.Ref">
      Designator test: access of elements of a character array.
      The array is passed as a parameter to the function, as is
      the index.
    </test>
    
    <test id="function6" type="run"
      file="HOTFunction6.Mod" output="HOTFunction6.Ref">
      Simple functions: Compare character parameter with constant
      character and return different integer values depending on the result.
    </test>

    <test id="loop1" type="run"
      file="HOTLoop1.Mod" output="HOTLoop1.Ref">
      Loop variant <code>REPEAT-UNTIL</code>: Calculate string length.
    </test>
    
    <test id="loop2" type="run"
      file="HOTLoop2.Mod" output="HOTLoop2.Ref">
      Loop variant <code>WHILE-DO</code>: Calculate string length.
    </test>
    
    <test id="loop3" type="run"
      file="HOTLoop3.Mod" output="HOTLoop3.Ref">
      Loop variant <code>LOOP-EXIT-END</code>: Calculate string length.
    </test>
    
    <test id="loop4" type="run"
      file="HOTLoop4.Mod" output="HOTLoop4.Ref">
      Loop variant <code>LOOP-EXIT-EXIT-END</code>: Calculate <code>x
      DIV 10</code> in a rather silly way for <code>0 &lt;= x &lt; 20</code>.
    </test>
    
    <test id="case1" type="run" file="Case1.Mod" output="Case1.Ref">
      <code>CASE</code> statement using branches with one label, two
      labels, a range as a label, and an <code>ELSE</code> part.
      The selector is an integer value.
    </test>
    
    <test id="and1" type="run" file="And1.Mod" output="And1.Ref">
      Testing shortcut evaluation of operator `<code>&amp;</code>'.
    </test>
    
    <test id="or1" type="run" file="Or1.Mod" output="Or1.Ref">
      Testing shortcut evaluation of operator `<code>OR</code>'.
    </test>
    
    <test id="varpar1" type="run"
      file= "HOTVarPar1.Mod" output="HOTVarPar1.Ref">
      Accessing a global variable through a <code>VAR</code> parameter.
    </test>
    
    <test id="inc1" type="run" file="Inc1.Mod" output="Inc1.Ref">
      Performing <code>INC</code> with default delta on global variable.
    </test>
    
    <test id="dec1" type="run" file="Dec1.Mod" output="Dec1.Ref">
      Performing <code>DEC</code> with default delta on global variable.
    </test>
    
    <test id="cap1" type="run" file="Cap1.Mod" output="Cap1.Ref">
      Predefined function <code>CAP</code> for some ASCII characters.
    </test>
    
    <test id="div1" type="run" file="Div1.Mod" output="Div1.Ref">
      Checks that <code>DIV</code> performs rounding to negative
      infinity.  The divisor is positive.
    </test>
    
    <test id="div2" type="run" relevance="informal"
          file="Div2.Mod" output="Div2.Ref">
      Checks result of <code>DIV</code> if the divisor is negative.
    </test>
    
    <test id="mod1" type="run" file="Mod1.Mod" output="Mod1.Ref">
      Checks that <code>MOD</code> performs rounding to negative
      infinity.  The divisor is positive.
    </test>
    
    <test id="mod2" type="run" relevance="informal"
          file="Mod2.Mod" output="Mod2.Ref">
      Checks result of <code>MOD</code> if the divisor is negative.
    </test>
    
    <test id="len1" type="run" file="Len1.Mod" output="Len1.Ref">
      Calling <code>LEN</code> on a 2-dimensional array.  All legal
      argument variants are excercised: without dimension, with
      dimension, and with partially indexed array.  Three different
      kinds of array variables are used: global array variable, open
      array parameter, and partially open array parameter.
    </test>
    
    <test id="len2" type="reject" file="Len2.Mod">
      Calling <code>LEN</code> without arguments.
    </test>
    
    <test id="len3" type="reject" file="Len3.Mod">
      Calling <code>LEN</code> with too many arguments.
    </test>
    
    <test id="len4" type="reject" file="Len4.Mod">
      Calling <code>LEN</code> with non-array argument.
    </test>
    
    <test id="len5" type="reject" file="Len5.Mod">
      Calling <code>LEN</code> with an out of range dimension number.
    </test>
    
    <test id="len6" type="reject" file="Len6.Mod">
      Calling <code>LEN</code> with a non-integer dimension number.
    </test>
    
    <test id="len7" type="reject" file="Len7.Mod">
      Calling <code>LEN</code> with an integer variable as dimension number.
    </test>

    <test id="minmax1" type="run" file="MinMax1.Mod" output="MinMax1.Ref">
      <code>MIN</code> and <code>MAX</code> of the integer types.
    </test>
  </testcases>
  
    
  <testcases profile="OOC2 Development: Checking Anti-Dependencies"
             default-lang="O1 O2 AO">
    <test id="antidep1" type="run" file="AntiDep1.Mod" output="AntiDep1.Ref">
      The record field must be read before it is overwritten.
    </test>
  </testcases>
  
      
  <testcases profile="OOC2 Development: Data Types" default-lang="O1 O2 AO">
    <test id="record1" type="run" file="Record1.Mod" output="Record1.Ref">
      Assignments to the fields of a global record variable.
    </test>
    
    <test id="record2" type="run" file="Record2.Mod" output="Record2.Ref">
      Assignments to the fields of a variable parameter of record type.
    </test>
    
    <test id="record3" type="run" file="Record3.Mod" output="Record3.Ref">
      Assignments to the fields of a value parameter of record type.
    </test>

    <test id="record4" type="run" file="Record4.Mod" output="Record4.Ref">
      Similar to <code>record1</code>, but with part of the record's
      fields taken from a base type.
    </test>
    
    <test id="record5" type="run" file="Record5.Mod" output="Record5.Ref">
      Similar to <code>record2</code>, but with part of the record's
      fields taken from a base type.
    </test>
    
    <test id="record6" type="run" file="Record6.Mod" output="Record6.Ref">
      Similar to <code>record3</code>, but with part of the record's
      fields taken from a base type.
    </test>
    
    <test id="record7" type="run" file="Record7.Mod" output="Record7.Ref">
      Similar to <code>record4</code>, but the variable is allocated
      on the heap.
    </test>

    <test id="record8" type="run" file="Record8.Mod" output="Record8.Ref">
      Similar to <code>record5</code>, but the variable is allocated
      on the heap.
    </test>

    <test id="record9" type="run" file="Record9.Mod" output="Record9.Ref">
      Similar to <code>record6</code>, but the variable is allocated
      on the heap.
    </test>
    
    <test id="array1" type="run" file="Array1.Mod" output="Array1.Ref">
      Assignments to an <code>ARRAY 3 OF SHORTINT</code>, and a loop 
      summing up the elements.  The array is passed both as value and
      variable parameter to the summation function.
    </test>
    
    <test id="array2" type="run" file="Array2.Mod" output="Array2.Ref">
      As <code>array1</code>, but with <code>INTEGER</code> as element
      type.
    </test>
    
    <test id="array3" type="run" file="Array3.Mod" output="Array3.Ref">
      Fill an 2-dimensional array of <code>INTEGER</code> and write
      the array lines.  The array is a global variable.
    </test>
    
    <test id="array4" type="run" file="Array4.Mod" output="Array4.Ref">
      Like <code>array3</code>, but the array is a parameter with 2
      open dimensions.
    </test>
    
    <test id="array5" type="run" file="Array5.Mod" output="Array5.Ref">
      Like <code>array4</code>, but the array elements are of type
      <code>SHORTINT</code>.
    </test>
    
    <test id="array6" type="run" file="Array6.Mod" output="Array6.Ref">
      Like <code>array1</code>, but the array variable is allocated on
      the heap.  Additionally, summation is also done directly on the
      pointer variable.
    </test>
    
    <test id="array7" type="run" file="Array7.Mod" output="Array7.Ref">
      Like <code>array6</code>, but the variable is an open
      array allocated on the heap.
    </test>
    
    <test id="array8" type="run" file="Array8.Mod" output="Array8.Ref">
      Like <code>array5</code>, but the variable is a 2-dimensional
      open array allocated on the heap.
    </test>

    <test id="procvar1" type="run" file="ProcVar1.Mod" output="ProcVar1.Ref">
      Call procedures through procedure variables.  The procedures
      have no arguments.
    </test>
    
    <test id="procvar2" type="run" file="ProcVar2.Mod" output="ProcVar2.Ref">
      Call procedures through procedure variables.  The procedures
      have a value and a <code>VAR</code> argument.
    </test>
    
    <test id="procvar3" type="run" file="ProcVar3.Mod" output="ProcVar3.Ref">
      Call function procedures through procedure variables.
    </test>
    
    <test id="procvar4" type="run" file="ProcVar4.Mod" output="ProcVar4.Ref">
      Call procedure through procedure variables.  The procedures
      have a value and a <code>VAR</code> argument of type
      <code>RECORD</code>.
    </test>
    
    <test id="procvar5" type="run" file="ProcVar5.Mod" output="ProcVar5.Ref">
      Call procedure through procedure variables.  The procedures
      have a value and a <code>VAR</code> argument of type
      <code>ARRAY</code>.
    </test>

    
    <test id="typetest1" type="run" file="TypeTest1.Mod" output="TypeTest1.Ref">
      Type tests on pointer variables.
    </test>

    <test id="typetest2" type="run" file="TypeTest2.Mod" output="TypeTest2.Ref">
      This is like <code>typetest1</code>, only that the pointer are
      dereferenced and tested against the corresponding record type.
    </test>
    
    <test id="typetest3" type="run" file="TypeTest3.Mod" output="TypeTest3.Ref">
      Type tests on <code>VAR</code> parameters of record type.  The
      record variables are deferenced pointers.
    </test>
    
    <test id="typetest4" type="run" file="TypeTest4.Mod" output="TypeTest4.Ref">
      Like <code>typetest3</code>, but using record variables.
    </test>
  </testcases>

  <testcases profile="OOC2 Development: Procedures" default-lang="O2">
    <test id="tbproc1" type="run" file="TBProc1.Mod" output="TBProc1.Ref">
      Calling a type-bound procedure of a pointer variable.
    </test>

    <test id="tbproc2" type="run" file="TBProc2.Mod" output="TBProc2.Ref">
      Calling a type-bound procedure of a record variable.
    </test>
    
    <test id="tbproc3" type="run" file="TBProc3.Mod" output="TBProc3.Ref">
      Calling a type-bound procedure of a dereferenced pointer variable.
    </test>
    
    <test id="tbproc4" type="run" file="TBProc4.Mod" output="TBProc4.Ref">
      Calling a type-bound procedure of an implictly dereferenced
      pointer variable.
    </test>
    
    <test id="tbproc5" type="run" file="TBProc5.Mod" output="TBProc5.Ref">
      Calling a type-bound procedure of a pointer variable.  The
      procedure is redefined in an extension of the pointer's type.
    </test>
    
    <test id="tbproc6" type="run" file="TBProc6.Mod" output="TBProc6.Ref">
      Calling a type-bound procedure of a pointer variable.  The
      procedure is inherited from the pointer's type.
    </test>

    <test id="tbproc7" type="run" file="TBProc7.Mod" output="TBProc7.Ref">
      Calling a type-bound procedure of a pointer variable.  The
      procedure is redefined in an extension of the pointer's type,
      and the redefinition does a super call.
    </test>

    
    <test id="nestedproc1" type="run"
          file="NestedProc1.Mod" output="NestedProc1.Ref">
      Calling a nested procedure.
    </test>
    
    <test id="nestedproc2" type="run"
          file="NestedProc2.Mod" output="NestedProc2.Ref">
      Calling a nested procedure, which sets a variable of the 
      enclosing procedure.
    </test>
    
    <test id="nestedproc3" type="run"
          file="NestedProc3.Mod" output="NestedProc3.Ref">
      Calling a nested procedure, which sets a variable of the 
      enclosing procedure that is shadowed by one of its parameters.
    </test>
    
  </testcases>
    
  <processor-info processor-name="TestCompile">
    <!--<reject-info id="baseline1" pos="\A%\Z" msg="Expected keyword `MODULE'"/>-->
    
    <reject-info id="len2" pos="Int (%LEN " msg="Wrong number of arguments"/>
    <reject-info id="len3" pos="Int (%LEN " msg="Wrong number of arguments"/>
    <reject-info id="len4" pos="LEN (%&quot;abc&quot;"
        msg="First argument of LEN must be an array designator"/>
    <reject-info id="len5" pos="a, %2),"
        msg="Integer constant in the range `0 &lt;= x &lt; 2' required"/>
    <reject-info id="len6" pos="a, %0X),"
        msg="Integer constant in the range `0 &lt;= x &lt; 2' required"/>
    <reject-info id="len7" pos="a, %d),"
        msg="Expression is not constant"/>
  </processor-info>
</testsuite-ext>
