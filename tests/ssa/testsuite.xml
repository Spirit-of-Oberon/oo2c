<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE testsuite-ext
          SYSTEM "../../rsrc/OOC/TestFramework/testcases-ext.dtd" [

<!ENTITY baseline-testcases
         SYSTEM "../../../hostess/hostess/oberon/baseline-testcases.xml">

<!ENTITY candidate-testcases
         SYSTEM "../../../hostess/hostess/oberon/candidate.xml">

<!ENTITY hostess-testcases
         SYSTEM "../../../hostess/hostess/oberon/testcases.xml">
]>

<testsuite-ext
  profile="Test Suite for Framework Testing"
  select ="prepare_out_module
  baseline1 baseline2 baseline3 baseline4 baseline5 baseline6
  baseline8 baseline10 baseline11
  function1 function2 function3 if1 if2 if3 function4 function5
  designator1 function6 loop1 loop2 varpar1 ooc_record1">

<!--<testsuite-ext
  profile="Test Suite for Framework Testing"
  select ="prepare_out_module baseline8">-->
  
  <testcases profile="Test Suite Setup" default-lang="O1 O2 AO">
    <test id="prepare_out_module" type="accept" file="../compile/src/Out.Mod">
      This is not a test case.  Rather, it prepares an Oakwood
      compliant module <code>Out</code> to supersede OOC's differing
      module of the same name.
    </test>
  </testcases>
  
  &baseline-testcases;
  <!--&candidate-testcases;
  &hostess-testcases;-->
  
  <testcases profile="OOC2 Development" default-lang="O1 O2 AO">
    <test id="function1" type="run"
      file="../compile/HOTFunction1.Mod" output="../compile/HOTFunction1.Ref">
      A very simple function: No input arguments, and a return
      statement with a constant expression.
    </test>
    
    <test id="function2" type="run"
      file="../compile/HOTFunction2.Mod" output="../compile/HOTFunction2.Ref">
      Another very simple function: The input parameter is used as the
      function's return value, without any transformation.
    </test>
    
    <test id="function3" type="run"
      file="HOTFunction3.Mod" output="HOTFunction3.Ref">
      Another very simple function: The input parameter is copied to 
      a local variable, which is subsequently used as the
      function's return value.
    </test>

    <test id="if1" type="run"
      file="HOTIf1.Mod" output="HOTIf1.Ref">
      A simple <code>IF-ELSE-END</code> statement, using a
      boolean parameter as guard.
    </test>
    
    <test id="if2" type="run"
      file="HOTIf2.Mod" output="HOTIf2.Ref">
      A simple <code>IF-END</code> statement, using a boolean parameter
      as guard.
    </test>
    
    <test id="if3" type="run"
      file="HOTIf3.Mod" output="HOTIf3.Ref">
      A simple <code>IF-ELSIF-ELSE-END</code> statement, using 
      boolean parameters as guards.
    </test>
    
    <test id="function4" type="run"
      file="HOTFunction4.Mod" output="HOTFunction4.Ref">
      Another simple function: The boolean input parameter selects
      between one of the two <code>RETURN</code> statements in
      the <code>IF</code> statement.
    </test>
    
    <test id="function5" type="run"
      file="HOTFunction5.Mod" output="HOTFunction5.Ref">
      Yet another simple function: Increment input value by one and
      return the result.
    </test>
    
    <test id="designator1" type="run"
      file="HOTDesignator1.Mod" output="HOTDesignator1.Ref">
      Designator test: access of elements of a character array.
      The array is passed as a parameter to the function, as is
      the index.
    </test>
    
    <test id="function6" type="run"
      file="HOTFunction6.Mod" output="HOTFunction6.Ref">
      Simple functions: Compare character parameter with constant
      character and return different integer values depending on the result.
    </test>

    <test id="loop1" type="run"
      file="HOTLoop1.Mod" output="HOTLoop1.Ref">
      Loop variant <code>REPEAT-UNTIL</code>: Calculate string length.
    </test>
    
    <test id="loop2" type="run"
      file="HOTLoop2.Mod" output="HOTLoop2.Ref">
      Loop variant <code>WHILE-DO</code>: Calculate string length.
    </test>
    
    <test id="varpar1" type="run"
      file= "HOTVarPar1.Mod" output="HOTVarPar1.Ref">
      Accessing a global variable through a <code>VAR</code> parameter.
    </test>
    
    <test id="ooc_record1" type="run" file="Record1.Mod" output="Record1.Ref">
      Assignments to the fields of a global record variable.
    </test>
  </testcases>
  
  <processor-info processor-name="TestCompile">
    <reject-info id="baseline1" pos="\A%\Z" msg="Expected keyword `MODULE'"/>
  </processor-info>
</testsuite-ext>
