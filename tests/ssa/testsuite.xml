<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE testsuite-ext
          SYSTEM "../../rsrc/OOC/TestFramework/testcases-ext.dtd" [

<!ENTITY baseline-testcases
         SYSTEM "../../../hostess/hostess/oberon/baseline-testcases.xml">
]>

<testsuite-ext
  profile="Test Suite for Framework Testing"
  select ="&SetupTestCasesWithOut;
  baseline1 baseline2 baseline3 baseline4 baseline5 baseline6
  baseline8 baseline10 baseline11
  function1 function2 function3 if1 if2 if3 function4 function5
  designator1 function6 loop1 loop2 loop3 loop4 varpar1
  ooc_record1 ooc_record2 ooc_record3 inc1 dec1 cap1
  len1 len2 len3 len4 len5 len6 len7
  array1 array2 array3 array4 array5 array6">

<!--<testsuite-ext
  profile="Test Suite for Framework Testing"
  select ="&SetupTestCasesWithOut; array6">-->
  
  &TestSetupWithOut;
  &baseline-testcases;
  <!--&candidate-testcases;
  &hostess-testcases;-->
  
  <testcases profile="OOC2 Development" default-lang="O2">
    <test id="function1" type="run"
      file="../compile/HOTFunction1.Mod" output="../compile/HOTFunction1.Ref">
      A very simple function: No input arguments, and a return
      statement with a constant expression.
    </test>
    
    <test id="function2" type="run"
      file="../compile/HOTFunction2.Mod" output="../compile/HOTFunction2.Ref">
      Another very simple function: The input parameter is used as the
      function's return value, without any transformation.
    </test>
    
    <test id="function3" type="run"
      file="HOTFunction3.Mod" output="HOTFunction3.Ref">
      Another very simple function: The input parameter is copied to 
      a local variable, which is subsequently used as the
      function's return value.
    </test>

    <test id="if1" type="run"
      file="HOTIf1.Mod" output="HOTIf1.Ref">
      A simple <code>IF-ELSE-END</code> statement, using a
      boolean parameter as guard.
    </test>
    
    <test id="if2" type="run"
      file="HOTIf2.Mod" output="HOTIf2.Ref">
      A simple <code>IF-END</code> statement, using a boolean parameter
      as guard.
    </test>
    
    <test id="if3" type="run"
      file="HOTIf3.Mod" output="HOTIf3.Ref">
      A simple <code>IF-ELSIF-ELSE-END</code> statement, using 
      boolean parameters as guards.
    </test>
    
    <test id="function4" type="run"
      file="HOTFunction4.Mod" output="HOTFunction4.Ref">
      Another simple function: The boolean input parameter selects
      between one of the two <code>RETURN</code> statements in
      the <code>IF</code> statement.
    </test>
    
    <test id="function5" type="run"
      file="HOTFunction5.Mod" output="HOTFunction5.Ref">
      Yet another simple function: Increment input value by one and
      return the result.
    </test>
    
    <test id="designator1" type="run"
      file="HOTDesignator1.Mod" output="HOTDesignator1.Ref">
      Designator test: access of elements of a character array.
      The array is passed as a parameter to the function, as is
      the index.
    </test>
    
    <test id="function6" type="run"
      file="HOTFunction6.Mod" output="HOTFunction6.Ref">
      Simple functions: Compare character parameter with constant
      character and return different integer values depending on the result.
    </test>

    <test id="loop1" type="run"
      file="HOTLoop1.Mod" output="HOTLoop1.Ref">
      Loop variant <code>REPEAT-UNTIL</code>: Calculate string length.
    </test>
    
    <test id="loop2" type="run"
      file="HOTLoop2.Mod" output="HOTLoop2.Ref">
      Loop variant <code>WHILE-DO</code>: Calculate string length.
    </test>
    
    <test id="loop3" type="run"
      file="HOTLoop3.Mod" output="HOTLoop3.Ref">
      Loop variant <code>LOOP-EXIT-END</code>: Calculate string length.
    </test>
    
    <test id="loop4" type="run"
      file="HOTLoop4.Mod" output="HOTLoop4.Ref">
      Loop variant <code>LOOP-EXIT-EXIT-END</code>: Calculate <code>x
      DIV 10</code> in a rather silly way for <code>0 &lt;= x &lt; 20</code>.
    </test>
    
    <test id="varpar1" type="run"
      file= "HOTVarPar1.Mod" output="HOTVarPar1.Ref">
      Accessing a global variable through a <code>VAR</code> parameter.
    </test>
    
    <test id="inc1" type="run" file="Inc1.Mod" output="Inc1.Ref">
      Performing <code>INC</code> with default delta on global variable.
    </test>
    
    <test id="dec1" type="run" file="Dec1.Mod" output="Dec1.Ref">
      Performing <code>DEC</code> with default delta on global variable.
    </test>
    
    <test id="cap1" type="run" file="Cap1.Mod" output="Cap1.Ref">
      Predefined function <code>CAP</code> for some ASCII characters.
    </test>
    
    <test id="len1" type="run" file="Len1.Mod" output="Len1.Ref">
      Calling <code>LEN</code> on a 2-dimensional array.  All legal
      argument variants are excercised: without dimension, with
      dimension, and with partially indexed array.  Three different
      kinds of array variables are used: global array variable, open
      array parameter, and partially open array parameter.
    </test>
    
    <test id="len2" type="reject" file="Len2.Mod">
      Calling <code>LEN</code> without arguments.
    </test>
    
    <test id="len3" type="reject" file="Len3.Mod">
      Calling <code>LEN</code> with too many arguments.
    </test>
    
    <test id="len4" type="reject" file="Len4.Mod">
      Calling <code>LEN</code> with non-array argument.
    </test>
    
    <test id="len5" type="reject" file="Len5.Mod">
      Calling <code>LEN</code> with an out of range dimension number.
    </test>
    
    <test id="len6" type="reject" file="Len6.Mod">
      Calling <code>LEN</code> with a non-integer dimension number.
    </test>
    
    <test id="len7" type="reject" file="Len7.Mod">
      Calling <code>LEN</code> with an integer variable as dimension number.
    </test>
  </testcases>
  
  <testcases profile="OOC2 Development: Data Types" default-lang="O1 O2 AO">
    <test id="ooc_record1" type="run" file="Record1.Mod" output="Record1.Ref">
      Assignments to the fields of a global record variable.
    </test>
    
    <test id="ooc_record2" type="run" file="Record2.Mod" output="Record2.Ref">
      Assignments to the fields of a variable parameter of record type.
    </test>
    
    <test id="ooc_record3" type="run" file="Record3.Mod" output="Record3.Ref">
      Assignments to the fields of a value parameter of record type.
    </test>

    <test id="array1" type="run" file="Array1.Mod" output="Array1.Ref">
      Assignments to an <code>ARRAY 3 OF SHORTINT</code>, and a loop 
      summing up the elements.  The array is passed both as value and
      variable parameter to the summation function.
    </test>
    
    <test id="array2" type="run" file="Array2.Mod" output="Array2.Ref">
      As <code>array1</code>, but with <code>INTEGER</code> as element
      type.
    </test>
    
    <test id="array3" type="run" file="Array3.Mod" output="Array3.Ref">
      Fill an 2-dimensional array of <code>INTEGER</code> and write
      the array lines.  The array is a global variable.
    </test>
    
    <test id="array4" type="run" file="Array4.Mod" output="Array4.Ref">
      Like <code>array3</code>, but the array is a parameter with 2
      open dimensions.
    </test>
    
    <test id="array5" type="run" file="Array5.Mod" output="Array5.Ref">
      Like <code>array4</code>, but the array elements are of type
      <code>SHORTINT</code>.
    </test>
    
    <test id="array6" type="run" file="Array6.Mod" output="Array6.Ref">
      Like <code>array1</code>, but the array variable is allocated on
      the heap.  Additionally, summation is also done directly on the
      pointer variable.
    </test>
  </testcases>
  
  <processor-info processor-name="TestCompile">
    <reject-info id="baseline1" pos="\A%\Z" msg="Expected keyword `MODULE'"/>
    
    <reject-info id="len2" pos="Int (%LEN " msg="Wrong number of arguments"/>
    <reject-info id="len3" pos="Int (%LEN " msg="Wrong number of arguments"/>
    <reject-info id="len4" pos="LEN (%&quot;abc&quot;"
        msg="First argument of LEN must be an array designator"/>
    <reject-info id="len5" pos="a, %2),"
        msg="Integer constant in the range `0 &lt;= x &lt; 2' required"/>
    <reject-info id="len6" pos="a, %0X),"
        msg="Integer constant in the range `0 &lt;= x &lt; 2' required"/>
    <reject-info id="len7" pos="a, %d),"
        msg="Integer constant in the range `0 &lt;= x &lt; 2' required"/>
  </processor-info>
</testsuite-ext>
