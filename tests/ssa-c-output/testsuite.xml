<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE testsuite-ext
          SYSTEM "../../rsrc/OOC/TestFramework/testcases-ext.dtd">

<testsuite-ext
  profile="Test Suite for Framework Testing"
  select ="prepare_out_module var1 var2 var3 var3b var3c var4 var4b 
  var5 var5b var6 var6b var7 var7b var7c">
<!--<testsuite-ext
  profile="Test Suite for Framework Testing"
  select ="prepare_out_module var3c var7c">-->
  
  <testcases profile="Test Suite Setup" default-lang="O1 O2 AO">
    <test id="prepare_out_module" type="accept" file="../compile/src/Out.Mod">
      This is not a test case.  Rather, it prepares an Oakwood
      compliant module <code>Out</code> to supersede OOC's differing
      module of the same name.
    </test>
  </testcases>
  
  <testcases profile="OOC/SSA: Quality Check C Code" default-lang="O2">
    <test id="var1" type="run" file="Var1.Mod" output="Var1.Ref">
      Reading a variable with a known value: instead of accessing
      memory, the known value should be used, and the local variable
      <code>F.y</code> should not be read.
    </test>
    
    <test id="var2" type="run" file="Var2.Mod" output="Var2.Ref">
      Assignment masked by subsequent assignment to the same var.
      The first assignment should be discarded, but the second must survive.
    </test>
    
    <test id="var3" type="run" file="Var3.Mod" output="Var3.Ref">
      Return value is taken from a local variable that is set in an 
      <code>IF</code> statement.  The assignments should be converted
      from memory writes to register values.
    </test>
    
    <test id="var3b" type="run" file="Var3b.Mod" output="Var3b.Ref">
      Similar to the preceding test case, with the added complication
      of a nested <code>IF</code> statement.
    </test>
    
    <test id="var3c" type="run" file="Var3c.Mod" output="Var3c.Ref">
      Like <code>var3</code>, with the added complication that the
      life time of a local variable extends across an <code>IF</code>
      statement.  The variable's value should not be passed through
      the select.
    </test>
    
    <test id="var4" type="run" file="Var4.Mod" output="Var4.Ref">
      Return value is taken from a global variable that is set in an 
      <code>IF</code> statement.  The assignments should remain,
      because the changed variable is visible outside the procedure.
    </test>
    
    <test id="var4b" type="run" file="Var4b.Mod" output="Var4b.Ref">
      Similar to the preceding test case, with the added complication
      of a nested <code>IF</code> statement.
    </test>
    
    <test id="var5" type="run" file="Var5.Mod" output="Var5.Ref">
      Like test case <code>var4</code>, but the global variable is
      set as a side-effect of a procedure call.  Here, the return
      value must be read from memory.
    </test>

    <test id="var5b" type="run" file="Var5b.Mod" output="Var5b.Ref">
      Like test case <code>var5</code>, but with a twist that should
      trigger a different code path in <code>OOC:SSA:Destore</code>.
    </test>

    <test id="var6" type="run" file="Var6.Mod" output="Var6.Ref">
      A combination of test cases <code>var4</code> and
      <code>var5</code>: one branche of the <code>IF</code> sets the
      global variable through an assignment, the other by means of a
      side-effect of a procedure call.  There should be one read of
      the global variable <code>x</code>, right after the procedure
      call with the side-effect.
    </test>

    <test id="var6b" type="run" file="Var6b.Mod" output="Var6b.Ref">
      Like <code>var6</code>, except that the branches of the
      <code>IF</code> statement have been swapped.
    </test>

    <test id="var7" type="run" file="Var7.Mod" output="Var7.Ref">
      Incrementing a local variable within a loop.  The variable
      should be kept in a register.
    </test>
    
    <test id="var7b" type="run" file="Var7b.Mod" output="Var7b.Ref">
      Incrementing a <em>global</em> variable within a loop.  The
      variable should not be read, although its value must be written
      with each iteration.  (Or, if the compiler is clever enough,
      once after the final iteration.)
    </test>

    <test id="var7c" type="run" file="Var7c.Mod" output="Var7c.Ref">
      Like <code>var7</code>, with the added complication that the
      life time of a local variable extends across an <code>IF</code>
      statement.  The variable's value should not be passed through
      the loop.
    </test>
  </testcases>
</testsuite-ext>
