.TH oo2c 1
.UC 5
.SH NAME
oo2c \- Oberon-2 compiler
.SH SYNOPSIS
.B oo2c
.RI [ options ]
.IR <module> ...
.br
.B oo2c
.RI ( --make | -M )
.RI [ options ]
.I <module>
.br
.B oo2c
.I --uses <ext-ident>
.RI [ options ]
.IR <module> ...
.br
.B oo2c
.I --build-package
.RI [ options ]
.I <package>
.br
.B oo2c
.I --install-package
.RI [ options ]
.I <package>
.br
.B oo2c
.I --uninstall-package
.RI [ options ]
.I <package>
.br
.B oo2c
.I --build-pkg-doc
.RI [ options ]
.I <package>
.br
.B oo2c
.I --update-repository
.RI [ options ]
.SH NOTE
This document is a subset of corresponding chapter of the 
.B OOC2 Reference 
.BR Manual .
It covers the basic functionality of
.BR oo2c .
For a complete overview of
.BR oo2c 's
features, the reader is referred to the reference manual (see below).
.SH DESCRIPTION
The default mode of
.B oo2c
assumes that all arguments are names of modules or source files and
tries to compile them to C code.  Compiling a single module in this
way can be used to do a syntax check on a module.  Module names are
resolved by searching in the repositories listed in the corresponding
section of the compiler configuration.

The option
.I --make 
(or 
.I -M
for short) turns a set of Oberon-2 modules into an executable program.
The single argument can be either the name of a module or a module's
file name.  Again, the compiler searches the configured repositories
to resolve module names.  The compiler inspects all modules imported
directly or indirectly by the given main module, and generates new C
code for any modules that have not been compiled yet, or whose C code
is not up to date anymore.  Then, all necessary object files are
generated by invoking the C compiler.  The final step links object
files and libraries into an executable program with the same name as
the main module.  Note that, unlike the Oberon System, there is no
notion of
.I commands
(i.e., parameterless exported procedures, which can be activated
directly by the user).  Instead, the module body of the main module
specifies the program's execution sequence.

The command
.I --uses
lists using occurences of the given declaration in the source code.
The modules given on the command line and all their imported modules
are searched.  The declaration is identified by a module name followed
by an arbitrary long sequence of names, separated by dots, like
.IR module.procedure.var .

With 
.IR --build-package ,
.IR --install-package ,
and
.I --uninstall-package
packages are compiled, installed, and uninstalled.  A package is a set
of libraries, executables, resource files, option definitions, and
pragma definitions.  It is described in it repository's
.I pkginfo.xml
file.

The option
.I --build-pkg-doc
creates HTML documentation for all modules used by the libraries and
executables of the given package.  After successful completion, the
files can be found under
.IR <repository>/oocdoc/html .

The command
.I --update-repository
updates the file
.I <oocdir>/pkginfo.xml
from on the meta information of all packages that have been installed
into the repository
.IR <oocdir> .
This is also done automatically after every
.I --install-package
and
.IR --uninstall-package .
.SH OPTIONS
.TP
.B --repository <directory>, -r <directory>
Add a directory to the list of repositories used by the compiler.  A
repository has a fixed directory structure, with subdirectory
.I src/
holding source files,
.IR sym/ ,
.IR obj/ ,
and
.IR bin/
storing symbol files, C header and code files, object files and
binaries produced by the compiler, and so on.  Repositories are
searched from right to left, with command line arguments taking
precedence of entries in the compiler's configuration file.  By
default, the current working directory is part of the list of
repositories.
.TP
.B --no-rtc
Remove all run-time checks from the generated code.  Typically, this
produces a large speedup.
.TP
.B --all, -A
Force compilation of all modules whose source code is available.  By
default, only modules with missing or inconsistent derived files are
compiled.
.TP
.B --verbose, -v
Currently no effect.
.TP
.B --warnings, -w
Currently no effect.
.TP
.B --cc <string>
The name of the C compiler.
.TP
.B --cflags <string>
These flags are added to the C compiler's argument list when
translating a C file into an object file.
.TP
.B --cppflags <string>
Flags targeted at the C compiler's preprocessor.
.TP
.B --ldflags <string>
The value of this string is appended to the link command.
.TP
.B --libs <string>
The value of this string is added to the very end of the link command.
.TP
.B --libtool <string>
The name of the
.B libtool
binary.  If the value is
.IR no ,
the the compiler does not produce static or shared libraries at all.
.TP
.B --libdir <string>
Specify the directory where libraries should be installed.  Note that
the same destination directory has to be used for both library
creation (with
.IR --build-package )
and library installation (with
.IR --install-package ).
.TP
.B --bindir <string>
Binaries are installed into this directory by
.IR --install-package .
.TP
.B --oocdir <string>
All module data produced by the compiler, like symbol files, header
files, or package meta data, are copied by
.I --install-package 
into this directory.  By default, this is the directory used when
installing the compiler, typically
.IR <prefix>/lib/oo2c .
.TP
.B --install <string>
.TP
.B --install-program <string>
.TP
.B --install-data <string>
.TP
.B --uninstall <string>
Commands to install directories, binaries, and data files, and the
command used to remove them with 
.IR --uninstall-package .
.TP
.B --xsltproc <string>
Name of the XSLT processor.  It produces the HTML version of the
documentation of library modules.  The value
.I no
disables HTML documentation.
.TP
.B --config <file>
Use given file name for the configuration file.
.TP
.B --error-style <string>
Selects the format of emitted error messages.  The default setting is 
.IR file:line:column ,
which generates messages like "src/Foo.Mod:2:15: Some horrible
error".  The setting
.I char-pos
selects the error format of oo2c v1, "4212: 123 Some horrible error",
where the first number is the character position in the file.  The
file name itself is given in a separate line.
.SH CONFIGURATION FILES
The compilers configuration is determined by the file
.I <prefix>/lib/oo2c/oo2crc.xml
and by the
.I pkginfo.xml
files of any repositories listed there.

.I oo2crc.xml
provides default value for options and pragma variables, and also
defines a default list of repositories: the compiler's installation
directory and the current working directory.  The name of the
configuration file can be overridden by setting the environment
variable
.BR OO2CRC .

Within a
.I pkginfo.xml
file, the root element
.B package
and its child elements describe the meta data of a package.  Among
other things, the provide a package name, a version, and optional
lists of executables, libraries, and resource files.  The compiler
uses this information to take appropriate action when executing a
.I --build-package
or
.I --install-package
command.  The file may also include package specific definitions of
options and pragma variables.  This information is incorporated
automatically by the compiler and extends the settings from
.IR oo2crc.xml .
For examples of 
.IR pkginfo.xml ,
please refer to
.I ./pkginfo.xml
and
.I ./lib/pkginfo.xml.in
in oo2c's distribution tar ball.
.SH ERROR MESSAGES
Any errors encountered while parsing a source file 
.I foo.Mod
are written to
.I stdout
like this:

  src/foo.Mod:<line>:<column>: <error message>

The integer <line> refers to a line in the file (the first line is 1),
and <column> to a column within that line (the first column being 1).
The rest of the line is a plain text error message.  The message
format can be changed with the option
.IR --error-style ,
and in connection with 
.I --error-style char-pos, 
the filter program
.BR ooef
can also be used.
.SH ENVIRONMENT
.I OO2CRC
overrides the name of the configuration file.
.SH FILES
.nf
.ta \w'file.c, file.dXXX'u
file.Mod        Source code of Oberon-2 Module.
file.Sym        Symbol file with public interface of module.
file.oh         Header file with C level interface of module.
file.c, file.d  Generated ANSI-C code for module.
file.o          Object file derived from file.d and file.c.
.Sp
.fi

In the directory 
.IR <prefix>/lib/oo2c :

.nf
.ta \w'file.c, file.dXXX'u
oo2crc.xml      Configuration file with defaults for options, pragmas,
                and repositories.
lib/__*.h       Auxiliary files of the compiler.
.Sp
.fi
.SH DIAGNOSTICS
The exit status is non zero, if, and only if, an error occurred during
compilation.
.SH SEE ALSO
ooef(1), oowhereis(1)

Additional topics covered by the OOC2 Reference Manual: installing
oo2c, use of initialization files, interfacing to C code, creating
static and shared libraries from Oberon-2 modules, and using the
Oberon-2 mode for Emacs.

The OOC Reference Manual can be obtained from the OOC Home Page at
http://ooc.sourceforge.net/.  It is available in info, Postscript, HTML,
and texinfo format.

Please note: At the time of writing, only the OOC Reference Manual for
version 1 is available.
.SH AUTHOR
Michael van Acken <mva@users.sf.net>
